generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  password          String?
  twoFactorEnabled  Boolean            @default(false)
  twoFactorSecret   String?
  backupCodes       String?
  roleId            String
  accounts          Account[]
  Authenticator     Authenticator[]
  authorProfile     AuthorProfile?
  posts             BlogPost[]         @relation("UserPosts")
  comments          Comment[]
  courses           Course[]           @relation("UserCourses")
  enrollments       Enrollment[]
  lessonCompletions LessonCompletion[]
  quizAttempts      QuizAttempt[]
  reactions         Reaction[]
  scormTracking     ScormTracking[]
  sessions          Session[]
  submissions       Submission[]
  role              Role               @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  description String?
  users       User[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
}

model AuthorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  fullName       String
  profilePhoto   String
  tagline        String
  qualifications String?
  profession     String
  expertise      Json
  socialLinks    Json?
  workExperience Json?
  education      Json?
  skills         Json?
  publications   Json?
  personalBrand  Json?
  contactInfo    Json?
  additionalInfo Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String?
  user           User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  status      String   @default("draft")
  stock       Int      @default(0)
  availableAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogPost {
  id             String     @id @default(cuid())
  title          String
  slug           String     @unique
  content        String
  excerpt        String?
  coverImage     String?
  videoUrl       String?
  published      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  publishedAt    DateTime?
  authorId       String
  reactionCounts String     @default("{}")
  views          Int        @default(0)
  author         User       @relation("UserPosts", fields: [authorId], references: [id])
  comments       Comment[]
  reactions      Reaction[]
  categories     Category[] @relation("BlogPostToCategory")
  tags           Tag[]      @relation("BlogPostToTag")

  @@index([authorId])
  @@index([slug])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @default("No description Available")
  slug        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[] @relation("BlogPostToCategory")

  @@index([slug])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String     @default("No description Available")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[] @relation("BlogPostToTag")

  @@index([slug])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postId    String
  authorId  String
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  author    User      @relation(fields: [authorId], references: [id])
  post      BlogPost  @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([authorId])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  post      BlogPost @relation(fields: [postId], references: [id])

  @@unique([postId, userId, type])
  @@index([postId])
  @@index([userId])
}

model Course {
  id            String         @id @default(cuid())
  title         String
  description   String?
  slug          String         @unique
  coverImage    String?
  published     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  pathId        String?
  author        User           @relation("UserCourses", fields: [authorId], references: [id])
  path          LearningPath?  @relation(fields: [pathId], references: [id])
  enrollments   Enrollment[]
  modules       Module[]
  scormPackages ScormPackage[]

  @@index([authorId])
}

model Module {
  id       String   @id @default(cuid())
  title    String
  order    Int
  courseId String
  lessons  Lesson[]
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Lesson {
  id          String             @id @default(cuid())
  title       String
  content     String
  type        String             @default("TEXT")
  moduleId    String
  order       Int
  duration    Int?
  assignments Assignment[]
  module      Module             @relation(fields: [moduleId], references: [id])
  completions LessonCompletion[]
  quizzes     Quiz?

  @@index([moduleId])
}

model LessonCompletion {
  id          String   @id @default(cuid())
  lessonId    String
  userId      String
  completedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, userId])
  @@index([lessonId])
  @@index([userId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  timeLimit    Int?
  passingScore Int           @default(70)
  lessonId     String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    Question[]
  lesson       Lesson        @relation(fields: [lessonId], references: [id])
  attempts     QuizAttempt[]

  @@index([lessonId])
}

model Question {
  id            String            @id @default(cuid())
  quizId        String
  text          String
  type          String            @default("MULTIPLE_CHOICE")
  options       Json
  correctAnswer String
  explanation   String?
  points        Int               @default(1)
  order         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  quiz          Quiz              @relation(fields: [quizId], references: [id])
  attempts      QuestionAttempt[]

  @@index([quizId])
}

model QuizAttempt {
  id          String            @id @default(cuid())
  userId      String
  quizId      String
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  score       Int?
  status      String            @default("IN_PROGRESS")
  questions   QuestionAttempt[]
  quiz        Quiz              @relation(fields: [quizId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([quizId])
}

model QuestionAttempt {
  id          String      @id @default(cuid())
  questionId  String
  attemptId   String
  answer      String
  isCorrect   Boolean
  points      Int
  submittedAt DateTime    @default(now())
  question    Question    @relation(fields: [questionId], references: [id])
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id])

  @@index([questionId])
  @@index([attemptId])
}

model Submission {
  id           String     @id @default(cuid())
  assignmentId String
  userId       String
  content      String
  grade        Float?
  submittedAt  DateTime   @default(now())
  gradedAt     DateTime?
  feedback     String?
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([assignmentId])
  @@index([userId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String
  dueDate     DateTime?
  lessonId    String
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([lessonId])
}

model LearningPath {
  id          String   @id @default(cuid())
  title       String
  description String?
  orderJson   String
  courses     Course[]

  @@map("learning_paths")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  status      String
  progress    Float     @default(0)
  grade       Float?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model ScormPackage {
  id       String          @id @default(cuid())
  title    String
  manifest String
  version  String
  courseId String
  course   Course          @relation(fields: [courseId], references: [id])
  tracking ScormTracking[]

  @@index([courseId])
}

model ScormTracking {
  id        String       @id @default(cuid())
  packageId String
  userId    String
  data      Json
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  package   ScormPackage @relation(fields: [packageId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([packageId, userId])
}
